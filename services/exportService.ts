import * as THREE from 'three';

/**
 * Converts a THREE.BufferGeometry to a .obj file string and triggers a download.
 * @param geometry The THREE.BufferGeometry to export.
 * @param filename The desired name for the output .obj file.
 */
export function exportToObj(geometry: THREE.BufferGeometry, filename: string): void {
  const vertices = geometry.attributes.position;
  const normals = geometry.attributes.normal;
  const indices = geometry.index;

  if (!vertices || !normals) {
    console.error("Geometry is missing position or normal attributes for OBJ export.");
    alert("Export failed: Geometry is missing required data.");
    return;
  }

  let objData = '# MP3gon model generated by Sonic Geometer\n';
  objData += `# Vertices: ${vertices.count}\n`;
  objData += `# Faces: ${indices ? indices.count / 3 : vertices.count / 3}\n\n`;


  // Write vertices
  for (let i = 0; i < vertices.count; i++) {
    const x = vertices.getX(i);
    const y = vertices.getY(i);
    const z = vertices.getZ(i);
    objData += `v ${x.toFixed(6)} ${y.toFixed(6)} ${z.toFixed(6)}\n`;
  }

  objData += '\n';

  // Write normals
  for (let i = 0; i < normals.count; i++) {
    const x = normals.getX(i);
    const y = normals.getY(i);
    const z = normals.getZ(i);
    objData += `vn ${x.toFixed(6)} ${y.toFixed(6)} ${z.toFixed(6)}\n`;
  }

  objData += '\n';

  // Write faces
  // The OBJ format uses 1-based indexing for vertices, normals, etc.
  objData += 's 1\n'; // Enable smoothing group
  if (indices) {
    for (let i = 0; i < indices.count; i += 3) {
      const a = indices.getX(i) + 1;
      const b = indices.getX(i + 1) + 1;
      const c = indices.getX(i + 2) + 1;
      // Format is v/vt/vn. We only have v and vn, so we use v//vn.
      objData += `f ${a}//${a} ${b}//${b} ${c}//${c}\n`;
    }
  } else {
    // Handle non-indexed geometry
    for (let i = 0; i < vertices.count; i += 3) {
      const a = i + 1;
      const b = i + 2;
      const c = i + 3;
      objData += `f ${a}//${a} ${b}//${b} ${c}//${c}\n`;
    }
  }

  try {
    const blob = new Blob([objData], { type: 'text/plain;charset=utf-8' });
    const url = URL.createObjectURL(blob);
    
    const link = document.createElement('a');
    link.href = url;
    link.download = filename;
    
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);
    
    URL.revokeObjectURL(url);
  } catch (e) {
    console.error("Failed to create or trigger download link for OBJ file.", e);
    alert("Export failed. Could not generate download link.");
  }
}
